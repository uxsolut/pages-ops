name: Deploy Landing (Flutter ZIP) — build + publish

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domínio'
        type: choice
        options: [pinacle.com.br, gestordecapitais.com, tetramusic.com.br]
        required: true
      slug:
        description: 'Slug (vazio, "beta", "dev", "beta/slug", "dev/slug" ou "slug")'
        required: false
      empresa:
        description: 'Nome da empresa já em minúsculo (opcional)'
        required: false
      id_empresa:
        description: 'ID da empresa (opcional; auditoria)'
        required: false
      zip_url:
        description: 'URL pública do ZIP do Flutter (com pubspec.yaml na raiz)'
        required: true
      aplicacao_id:
        description: 'ID da aplicação no banco (para PUT de status)'
        required: true
      api_base:
        description: 'URL base da API (ex: http://178.156.182.205/api)'
        required: true   # sem default pra não errar ambiente

permissions:
  contents: write

concurrency:
  group: deploy-landing
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (repo ops)
        uses: actions/checkout@v4

      - name: Iniciar arquivo de log
        run: |
          : > deploy.log

      - name: Validar inputs e preparar ambiente
        id: derive
        shell: bash
        run: |
          set -euo pipefail

          DOMAIN="${{ github.event.inputs.domain }}"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          RAW_EMPRESA="${{ github.event.inputs.empresa }}"
          RAW_ID_EMPRESA="${{ github.event.inputs.id_empresa }}"
          ZIP_URL="${{ github.event.inputs.zip_url }}"
          APLICACAO_ID="${{ github.event.inputs.aplicacao_id }}"
          API_BASE="${{ github.event.inputs.api_base }}"

          if [[ -z "${API_BASE:-}" ]]; then
            echo "api_base é obrigatório (ex.: http://178.156.182.205/api)" | tee -a deploy.log; exit 1
          fi
          API_BASE="${API_BASE%/}"

          echo ">>> Inputs:" | tee -a deploy.log
          echo "  domain=${DOMAIN}" | tee -a deploy.log
          echo "  raw_slug=${RAW_SLUG:-<vazio>}" | tee -a deploy.log
          echo "  raw_empresa=${RAW_EMPRESA:-<vazio>}" | tee -a deploy.log
          echo "  raw_id_empresa=${RAW_ID_EMPRESA:-<vazio>}" | tee -a deploy.log
          echo "  zip_url=${ZIP_URL}" | tee -a deploy.log
          echo "  aplicacao_id=${APLICACAO_ID}" | tee -a deploy.log
          echo "  api_base=${API_BASE}" | tee -a deploy.log

          case "$DOMAIN" in
            pinacle.com.br|gestordecapitais.com|tetramusic.com.br) ;;
            *) echo "Domínio inválido" | tee -a deploy.log; exit 1 ;;
          esac

          SLUG="$(echo -n "${RAW_SLUG:-}" | sed 's#^/*##; s#/*$##')"
          re_slug='^$|^(beta|dev)$|^(beta|dev)/[a-z0-9-]{1,64}$|^[a-z0-9-]{1,64}$'
          if [[ ! "$SLUG" =~ $re_slug ]]; then
            echo "Slug inválido. Use vazio, 'beta', 'dev', 'beta/<slug>', 'dev/<slug>' ou '<slug>' (a-z0-9-, 1-64)." | tee -a deploy.log
            exit 1
          fi

          STATE=""; LEAF=""
          if [[ "$SLUG" == "beta" || "$SLUG" == "dev" ]]; then
            STATE="$SLUG"
          elif [[ "$SLUG" =~ ^(beta|dev)/.+$ ]]; then
            STATE="${SLUG%%/*}"; LEAF="${SLUG#*/}"
          elif [[ -n "$SLUG" ]]; then
            LEAF="$SLUG"
          fi

          EMPRESA_SLUG=""
          if [[ -n "${RAW_EMPRESA:-}" ]]; then
            EMPRESA_SLUG="$(echo -n "$RAW_EMPRESA" | tr '[:upper:]' '[:lower:]' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g; s/[[:space:]]+/-/g')"
          fi

          parts=()
          [[ -n "$STATE" ]] && parts+=("$STATE")
          [[ -n "$EMPRESA_SLUG" ]] && parts+=("$EMPRESA_SLUG")
          [[ -n "$LEAF" ]] && parts+=("$LEAF")

          if [[ ${#parts[@]} -eq 0 ]]; then
            BASE_HREF="/"; FINAL_PATH="/"
          else
            JOINED="$(IFS=/; echo "${parts[*]}")"
            BASE_HREF="/${JOINED}/"; FINAL_PATH="/${JOINED}/"
          fi

          DEST_DIR="/var/www/pages/${DOMAIN}"
          if [[ ${#parts[@]} -gt 0 ]]; then DEST_DIR="${DEST_DIR}${FINAL_PATH}"; fi

          echo ">>> Derivados:" | tee -a deploy.log
          echo "  STATE=${STATE:-<vazio>}" | tee -a deploy.log
          echo "  LEAF=${LEAF:-<vazio>}" | tee -a deploy.log
          echo "  EMPRESA_SLUG=${EMPRESA_SLUG:-<vazio>}" | tee -a deploy.log
          echo "  BASE_HREF=${BASE_HREF}" | tee -a deploy.log
          echo "  DEST_DIR=${DEST_DIR}" | tee -a deploy.log

          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "[ -d /var/www/pages/${DOMAIN} ] || { echo 'Domínio não preparado no servidor' ; exit 1; }" | tee -a deploy.log

          {
            echo "domain=$DOMAIN"
            echo "slug=$SLUG"
            echo "state=$STATE"
            echo "leaf=$LEAF"
            echo "empresa_slug=$EMPRESA_SLUG"
            echo "base_href=$BASE_HREF"
            echo "dest_dir=$DEST_DIR"
            echo "zip_url=${ZIP_URL}"
            echo "aplicacao_id=${APLICACAO_ID}"
            echo "api_base=${API_BASE}"
          } >> "$GITHUB_OUTPUT"

      - name: Baixar ZIP do Flutter
        run: |
          set -euo pipefail
          curl -fL "${{ steps.derive.outputs.zip_url }}" -o site.zip 2>&1 | tee -a deploy.log

      - name: Conferir estrutura do ZIP
        run: |
          set -euo pipefail
          unzip -q site.zip -d _src 2>&1 | tee -a deploy.log
          test -f _src/pubspec.yaml || { echo "ZIP deve conter pubspec.yaml na raiz" | tee -a deploy.log; exit 1; }
          ls -la _src 2>&1 | tee -a deploy.log

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache do .pub-cache (opcional)
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-pubcache-${{ runner.os }}-${{ hashFiles('_src/pubspec.lock', '_src/pubspec.yaml') }}
          restore-keys: |
            flutter-pubcache-${{ runner.os }}-

      - name: Flutter pub get
        working-directory: _src
        run: |
          set -euo pipefail
          flutter pub get 2>&1 | tee -a ../deploy.log

      - name: Garantir plataforma Web (se o ZIP não vier com web/)
        working-directory: _src
        run: |
          set -euo pipefail
          flutter config --enable-web 2>&1 | tee -a ../deploy.log
          if [ ! -d "web" ]; then
            echo "Projeto sem suporte Web; executando flutter create..." | tee -a ../deploy.log
            flutter create . --platforms web 2>&1 | tee -a ../deploy.log
          fi

      - name: Build Flutter Web (com base-href derivado)
        working-directory: _src
        run: |
          set -euo pipefail
          flutter clean 2>&1 | tee -a ../deploy.log
          flutter config --enable-web 2>&1 | tee -a ../deploy.log
          if flutter build web -h | grep -q -- '--web-renderer'; then
            flutter build web --release --web-renderer canvaskit --base-href "${{ steps.derive.outputs.base_href }}" 2>&1 | tee -a ../deploy.log
          else
            flutter build web --release --base-href "${{ steps.derive.outputs.base_href }}" 2>&1 | tee -a ../deploy.log
          fi

      # ===================== (NOVO) BAIXAR E INJETAR METADADOS =====================
      - name: Baixar metadados (opcional)
        env:
          API_BASE: ${{ steps.derive.outputs.api_base }}
          APLICACAO_ID: ${{ steps.derive.outputs.aplicacao_id }}
        run: |
          set -euo pipefail
          # usa barra final e segue redirect (-L)
          URL="${API_BASE%/}/page-meta/?aplicacao_id=${APLICACAO_ID}&rota=%2F&lang_tag=pt-BR"
          echo "GET $URL" | tee -a deploy.log
          curl -fLsS -L "$URL" \
            -H "Accept: application/json" \
            -o _meta.json || echo "[]" > _meta.json
          # logs úteis
          echo -n "Meta bytes: " | tee -a deploy.log
          wc -c < _meta.json | tee -a deploy.log
          echo -n "Meta length: " | tee -a deploy.log
          (jq -r 'length' _meta.json 2>/dev/null || echo 0) | tee -a deploy.log
          echo "Preview do primeiro item:" | tee -a deploy.log
          (jq -r '.[0]' _meta.json 2>/dev/null | head -c 400 || true) | tee -a deploy.log
          echo | tee -a deploy.log

      - name: Injetar metadados no index.html (se houver)
        working-directory: _src/build/web
        run: |
          set -euo pipefail
          # Se não houver itens, sai silencioso
          test -s ../../_meta.json || exit 0
          if ! jq -e 'length>0' ../../_meta.json >/dev/null 2>&1; then exit 0; fi

          jq -r '.[0]' ../../_meta.json > ../../_meta_one.json

          TITLE="$(jq -r '.seo_title // empty' ../../_meta_one.json)"
          DESC="$(jq -r '.seo_description // empty' ../../_meta_one.json)"
          CANON="$(jq -r '.canonical_url // empty' ../../_meta_one.json)"
          OG_TITLE="$(jq -r '.og_title // empty' ../../_meta_one.json)"
          OG_DESC="$(jq -r '.og_description // empty' ../../_meta_one.json)"
          OG_IMG="$(jq -r '.og_image_url // empty' ../../_meta_one.json)"
          OG_TYPE="$(jq -r '.og_type // "website"' ../../_meta_one.json)"
          SITE_NAME="$(jq -r '.site_name // empty' ../../_meta_one.json)"

          # Blocos opcionais
          ARTICLE_JSON="$(jq -c 'try .article // {}' ../../_meta_one.json)"
          PRODUCT_JSON="$(jq -c 'try .product // {}' ../../_meta_one.json)"
          LOCALBIZ_JSON="$(jq -c 'try .localbusiness // {}' ../../_meta_one.json)"

          # Limpa possíveis tags antigas básicas para evitar duplicatas
          sed -i '/<meta name="description"/Id' index.html
          sed -i '/<link rel="canonical"/Id' index.html
          sed -i '/<meta property="og:/Id' index.html
          sed -i '/<meta name="twitter:/Id' index.html

          # Prepara bloco a ser injetado
          {
            echo '<!-- injected SEO start -->'
            [[ -n "$TITLE" ]] && echo "<title>${TITLE}</title>"
            [[ -n "$DESC"  ]] && echo "<meta name=\"description\" content=\"${DESC}\">"
            [[ -n "$CANON" ]] && echo "<link rel=\"canonical\" href=\"${CANON}\">"

            # Open Graph
            [[ -n "$OG_TITLE" ]] && echo "<meta property=\"og:title\" content=\"${OG_TITLE}\">"
            [[ -n "$OG_DESC"  ]] && echo "<meta property=\"og:description\" content=\"${OG_DESC}\">"
            [[ -n "$OG_IMG"   ]] && echo "<meta property=\"og:image\" content=\"${OG_IMG}\">"
            [[ -n "$OG_TYPE"  ]] && echo "<meta property=\"og:type\" content=\"${OG_TYPE}\">"
            [[ -n "$SITE_NAME" ]] && echo "<meta property=\"og:site_name\" content=\"${SITE_NAME}\">"

            # Twitter (usa og como fallback)
            [[ -n "$OG_TITLE" ]] && echo "<meta name=\"twitter:title\" content=\"${OG_TITLE}\">"
            [[ -n "$OG_DESC"  ]] && echo "<meta name=\"twitter:description\" content=\"${OG_DESC}\">"
            [[ -n "$OG_IMG"   ]] && echo "<meta name=\"twitter:image\" content=\"${OG_IMG}\">"
            echo "<meta name=\"twitter:card\" content=\"summary_large_image\">"

            # JSON-LD (gera somente se tiver conteúdo)
            if jq -e 'with_entries(select(.value != null)) | length>0' <<<"$ARTICLE_JSON" >/dev/null; then
              jq -n --argjson a "$ARTICLE_JSON" \
                 '{ "@context":"https://schema.org", "@type": ($a.type // "Article"),
                    "headline":$a.headline, "description":$a.description, "author":($a.author_name // null),
                    "datePublished":$a.date_published, "dateModified":$a.date_modified,
                    "image":($a.cover_image_url // null) }' \
              | sed '1s/^/<script type="application\/ld+json">/; $s/$/<\/script>/'
            fi

            if jq -e 'with_entries(select(.value != null)) | length>0' <<<"$PRODUCT_JSON" >/dev/null; then
              jq -n --argjson p "$PRODUCT_JSON" \
                 '{ "@context":"https://schema.org", "@type":"Product",
                    "name":$p.name, "description":$p.description, "sku":$p.sku, "brand":$p.brand,
                    "image":$p.image_urls,
                    "offers":{"@type":"Offer","priceCurrency":$p.price_currency, "price":($p.price|tostring?),
                              "availability":$p.availability,"itemCondition":$p.item_condition,
                              "priceValidUntil":$p.price_valid_until} }' \
              | sed '1s/^/<script type="application\/ld+json">/; $s/$/<\/script>/'
            fi

            if jq -e 'with_entries(select(.value != null)) | length>0' <<<"$LOCALBIZ_JSON" >/dev/null; then
              jq -n --argjson b "$LOCALBIZ_JSON" \
                 '{ "@context":"https://schema.org", "@type":"LocalBusiness",
                    "name":$b.business_name, "telephone":$b.phone, "priceRange":$b.price_range,
                    "address":{"@type":"PostalAddress","streetAddress":$b.street,"addressLocality":$b.city,
                               "addressRegion":$b.region,"postalCode":$b.zip},
                    "geo":{"@type":"GeoCoordinates","latitude":$b.latitude,"longitude":$b.longitude},
                    "openingHours":$b.opening_hours, "image":$b.image_urls }' \
              | sed '1s/^/<script type="application\/ld+json">/; $s/$/<\/script>/'
            fi

            echo '<!-- injected SEO end -->'
          } > __inject.html

          # Injeta após a primeira tag <head>
          awk 'BEGIN{done=0} {print; if(!done && tolower($0) ~ /<head[^>]*>/){system("cat __inject.html"); done=1}}' index.html > __index.html
          mv __index.html index.html
          rm -f __inject.html

      # ===================== FIM METADADOS =====================

      - name: Criar diretório destino
        run: |
          set -euo pipefail
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p '${{ steps.derive.outputs.dest_dir }}'" 2>&1 | tee -a deploy.log

      - name: Limpar homepage (prod sem estado/empresa/slug)
        if: ${{ steps.derive.outputs.state == '' && steps.derive.outputs.leaf == '' && steps.derive.outputs.empresa_slug == '' }}
        run: |
          set -euo pipefail
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "set -euo pipefail; DEST='${{ steps.derive.outputs.dest_dir }}'; \
             rm -f  \"\$DEST/index.html\" \"\$DEST/favicon.png\" \"\$DEST/favicon.ico\" \
                    \"\$DEST/manifest.json\" \"\$DEST/manifest.webmanifest\" \
                    \"\$DEST/flutter.js\" \"\$DEST/flutter_service_worker.js\" \
                    \"\$DEST/version.txt\" \"\$DEST/assets/AssetManifest.json\" \
                    \"\$DEST/assets/FontManifest.json\" || true; \
             rm -rf \"\$DEST/assets\" \"\$DEST/icons\" \"\$DEST/fonts\" \
                    \"\$DEST/canvaskit\" \"\$DEST/_flutter\" || true" 2>&1 | tee -a deploy.log

      - name: Rsync para o servidor
        run: |
          set -euo pipefail
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          RSYNC_DELETE="--delete"
          if [[ -z "${{ steps.derive.outputs.state }}" && -z "${{ steps.derive.outputs.leaf }}" && -z "${{ steps.derive.outputs.empresa_slug }}" ]]; then RSYNC_DELETE=""; fi
          rsync -avzr ${RSYNC_DELETE} -e "ssh -i ~/.ssh/id_rsa -p $SSH_PORT" _src/build/web/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"${{ steps.derive.outputs.dest_dir }}/" 2>&1 | tee -a deploy.log

      - name: Gravar version.txt no destino
        run: |
          set -euo pipefail
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "printf 'domain=%s\nslug=%s\nempresa_slug=%s\nzip_url=%s\ncommit=%s\nrun_id=%s\ndate=%s\nbase_href=%s\n' \
             '${{ steps.derive.outputs.domain }}' '${{ steps.derive.outputs.slug }}' '${{ steps.derive.outputs.empresa_slug }}' \
             '${{ steps.derive.outputs.zip_url }}' '${{ github.sha }}' '${{ github.run_id }}' \"\$(date -u +'%F %T UTC')\" \
             '${{ steps.derive.outputs.base_href }}' > '${{ steps.derive.outputs.dest_dir }}/version.txt'" 2>&1 | tee -a deploy.log

      # ===================== PUT DE STATUS (sempre usando api_base) =====================
      - name: Marcar CONCLUÍDO na API
        if: success()
        env:
          API_BASE: ${{ steps.derive.outputs.api_base }}
          APLICACAO_ID: ${{ steps.derive.outputs.aplicacao_id }}
          API_TOKEN: ${{ secrets.API_TOKEN_DEPLOY }}
        run: |
          set -euo pipefail
          export LC_ALL=C.UTF-8

          AUTH=()
          [[ -n "${API_TOKEN:-}" ]] && AUTH=(-H "Authorization: Bearer ${API_TOKEN}")

          echo "PUT ${API_BASE}/status-aplicacao/${APLICACAO_ID} -> concluído" | tee -a deploy.log

          printf '%s' '{"status":"concluído","resumo_do_erro":null}' \
            | curl --fail-with-body -sS -X PUT \
                -H "Content-Type: application/json; charset=utf-8" \
                "${AUTH[@]}" \
                "${API_BASE}/status-aplicacao/${APLICACAO_ID}" \
                --data-binary @- \
            | tee -a deploy.log
          echo >> deploy.log

      - name: Marcar FALHOU na API (com últimas 200 linhas do log)
        if: failure()
        env:
          API_BASE: ${{ steps.derive.outputs.api_base }}
          APLICACAO_ID: ${{ steps.derive.outputs.aplicacao_id }}
          API_TOKEN: ${{ secrets.API_TOKEN_DEPLOY }}
        run: |
          set -euo pipefail
          export LC_ALL=C.UTF-8
          ERR_SUMMARY_JSON="$(tail -n 200 deploy.log | jq -Rs .)"

          AUTH=()
          [[ -n "${API_TOKEN:-}" ]] && AUTH=(-H "Authorization: Bearer ${API_TOKEN}")

          echo "PUT ${API_BASE}/status-aplicacao/${APLICACAO_ID} -> falhou" | tee -a deploy.log

          JSON_PAYLOAD="{\"status\":\"falhou\",\"resumo_do_erro\":${ERR_SUMMARY_JSON}}"
          echo "${JSON_PAYLOAD}" | tee -a deploy.log

          printf '%s' "${JSON_PAYLOAD}" \
            | curl --fail-with-body -sS -X PUT \
                -H "Content-Type: application/json; charset=utf-8" \
                "${AUTH[@]}" \
                "${API_BASE}/status-aplicacao/${APLICACAO_ID}" \
                --data-binary @- \
            | tee -a deploy.log
          echo >> deploy.log

      - name: Marcar CANCELADO na API
        if: cancelled()
        env:
          API_BASE: ${{ steps.derive.outputs.api_base }}
          APLICACAO_ID: ${{ steps.derive.outputs.aplicacao_id }}
          API_TOKEN: ${{ secrets.API_TOKEN_DEPLOY }}
        run: |
          set -euo pipefail
          export LC_ALL=C.UTF-8

          AUTH=()
          [[ -n "${API_TOKEN:-}" ]] && AUTH=(-H "Authorization: Bearer ${API_TOKEN}")

          echo "PUT ${API_BASE}/status-aplicacao/${APLICACAO_ID} -> cancelado" | tee -a deploy.log

          printf '%s' '{"status":"cancelado","resumo_do_erro":null}' \
            | curl --fail-with-body -sS -X PUT \
                -H "Content-Type: application/json; charset=utf-8" \
                "${AUTH[@]}" \
                "${API_BASE}/status-aplicacao/${APLICACAO_ID}" \
                --data-binary @- \
            | tee -a deploy.log
          echo >> deploy.log
