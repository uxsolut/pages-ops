name: Deploy Landing (Flutter ZIP) — build + publish

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domínio'
        type: choice
        options: [pinacle.com.br, gestordecapitais.com, tetramusic.com.br]
        required: true
      slug:
        description: 'Slug (vazio, "beta", "dev", "beta/slug", "dev/slug" ou "slug")'
        required: false
      id_empresa:
        description: 'ID da empresa (opcional; inclui o nome da empresa na URL)'
        required: false
      zip_url:
        description: 'URL pública do ZIP do Flutter (com pubspec.yaml na raiz)'
        required: true

permissions:
  contents: write

concurrency:
  group: deploy-landing
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (repo ops)
        uses: actions/checkout@v4

      - name: Validar inputs e preparar ambiente
        id: derive
        shell: bash
        env:
          PGHOST:     ${{ secrets.PGHOST }}
          PGPORT:     ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER:     ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: |
          set -euo pipefail

          DOMAIN="${{ github.event.inputs.domain }}"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          RAW_ID_EMPRESA="${{ github.event.inputs.id_empresa }}"
          ZIP_URL="${{ github.event.inputs.zip_url }}"

          # -- slug (1 nível) e domínio --
          SLUG="$(echo -n "${RAW_SLUG:-}" | sed 's#^/*##; s#/*$##')"
          case "$DOMAIN" in
            pinacle.com.br|gestordecapitais.com|tetramusic.com.br) ;;
            *) echo "Domínio inválido"; exit 1 ;;
          esac
          re_slug='^$|^(beta|dev)$|^(beta|dev)/[a-z0-9-]{1,64}$|^[a-z0-9-]{1,64}$'
          if [[ ! "$SLUG" =~ $re_slug ]]; then
            echo "Slug inválido."; exit 1
          fi

          # -- derivar estado/folha --
          STATE=""; LEAF=""
          if [[ "$SLUG" == "beta" || "$SLUG" == "dev" ]]; then
            STATE="$SLUG"
          elif [[ "$SLUG" =~ ^(beta|dev)/.+$ ]]; then
            STATE="${SLUG%%/*}"; LEAF="${SLUG#*/}"
          elif [[ -n "$SLUG" ]]; then
            LEAF="$SLUG"
          fi

          # -- empresa: **mesmo tratamento do estado** (apenas lower(nome)) --
          EMPRESA_SEG=""
          RAW_ID_EMPRESA_TRIM="$(echo -n "${RAW_ID_EMPRESA:-}" | tr -d '[:space:]')"
          if [[ -n "$RAW_ID_EMPRESA_TRIM" ]]; then
            # precisa ser numérico
            [[ "$RAW_ID_EMPRESA_TRIM" =~ ^[0-9]+$ ]] || { echo "id_empresa deve ser numérico"; exit 1; }

            : "${PGPORT:=5432}"
            sudo apt-get update -y
            sudo apt-get install -y postgresql-client > /dev/null

            [[ -n "${PGHOST:-}" && -n "${PGDATABASE:-}" && -n "${PGUSER:-}" && -n "${PGPASSWORD:-}" ]] \
              || { echo "Faltam secrets do Postgres (PG*)."; exit 1; }

            # pega o nome **minúsculo** exatamente como no banco (sem slugify)
            EMPRESA_SEG="$(psql "host=$PGHOST port=$PGPORT dbname=$PGDATABASE user=$PGUSER password=$PGPASSWORD" \
              -tA -c "SELECT lower(nome) FROM global.empresas WHERE id = ${RAW_ID_EMPRESA_TRIM} LIMIT 1;" \
              | sed 's/^[[:space:]]*//; s/[[:space:]]*$//')"

            [[ -n "$EMPRESA_SEG" ]] || { echo "Empresa id=${RAW_ID_EMPRESA_TRIM} não encontrada."; exit 1; }
          fi

          # -- montar caminho final: /<estado?>/<empresa?>/<slug?>/ --
          parts=()
          [[ -n "$STATE" ]] && parts+=("$STATE")
          [[ -n "$EMPRESA_SEG" ]] && parts+=("$EMPRESA_SEG")
          [[ -n "$LEAF" ]] && parts+=("$LEAF")

          if [[ ${#parts[@]} -eq 0 ]]; then
            BASE_HREF="/"; FINAL_PATH="/"
          else
            JOINED="$(IFS=/; echo "${parts[*]}")"
            BASE_HREF="/${JOINED}/"; FINAL_PATH="/${JOINED}/"
          fi

          # se id_empresa foi enviado, Garante que entrou no caminho
          if [[ -n "$RAW_ID_EMPRESA_TRIM" && "${FINAL_PATH}" != */${EMPRESA_SEG}/* && "${FINAL_PATH}" != */${EMPRESA_SEG}/ ]]; then
            echo "id_empresa informado, mas '/${EMPRESA_SEG}/' não entrou no caminho: ${FINAL_PATH}"; exit 1
          fi

          DEST_DIR="/var/www/pages/${DOMAIN}"
          [[ ${#parts[@]} -gt 0 ]] && DEST_DIR="${DEST_DIR}${FINAL_PATH}"

          echo "domain=$DOMAIN"            >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG"                >> "$GITHUB_OUTPUT"
          echo "state=$STATE"              >> "$GITHUB_OUTPUT"
          echo "leaf=$LEAF"                >> "$GITHUB_OUTPUT"
          echo "empresa_slug=$EMPRESA_SEG" >> "$GITHUB_OUTPUT"
          echo "base_href=$BASE_HREF"      >> "$GITHUB_OUTPUT"
          echo "dest_dir=$DEST_DIR"        >> "$GITHUB_OUTPUT"
          echo "zip_url=$ZIP_URL"          >> "$GITHUB_OUTPUT"

          # SSH/host check
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "[ -d /var/www/pages/${DOMAIN} ] || { echo 'Domínio não preparado no servidor'; exit 1; }"

      - name: Baixar ZIP do Flutter
        run: |
          curl -fL "${{ steps.derive.outputs.zip_url }}" -o site.zip

      - name: Conferir estrutura do ZIP
        run: |
          unzip -q site.zip -d _src
          test -f _src/pubspec.yaml || { echo "ZIP deve conter pubspec.yaml na raiz"; exit 1; }
          ls -la _src

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache do .pub-cache (opcional)
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-pubcache-${{ runner.os }}-${{ hashFiles('_src/pubspec.lock', '_src/pubspec.yaml') }}
          restore-keys: |
            flutter-pubcache-${{ runner.os }}-

      - name: Flutter pub get
        working-directory: _src
        run: flutter pub get

      - name: Garantir plataforma Web (se o ZIP não vier com web/)
        working-directory: _src
        run: |
          flutter config --enable-web
          if [ ! -d "web" ]; then
            echo "Projeto sem suporte Web; executando flutter create..."
            flutter create . --platforms web
          fi

      - name: Build Flutter Web (com base-href derivado)
        working-directory: _src
        run: |
          flutter clean
          flutter config --enable-web
          if flutter build web -h | grep -q -- '--web-renderer'; then
            flutter build web --release --web-renderer canvaskit \
              --base-href "${{ steps.derive.outputs.base_href }}"
          else
            flutter build web --release \
              --base-href "${{ steps.derive.outputs.base_href }}"
          fi

      - name: Criar diretório destino
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p '${{ steps.derive.outputs.dest_dir }}'"

      - name: Limpar homepage (prod sem estado/empresa/slug)
        if: ${{ steps.derive.outputs.state == '' && steps.derive.outputs.leaf == '' && steps.derive.outputs.empresa_slug == '' }}
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "set -euo pipefail; \
             DEST='${{ steps.derive.outputs.dest_dir }}'; \
             rm -f  \"\$DEST/index.html\" \
                    \"\$DEST/favicon.png\" \
                    \"\$DEST/favicon.ico\" \
                    \"\$DEST/manifest.json\" \
                    \"\$DEST/manifest.webmanifest\" \
                    \"\$DEST/flutter.js\" \
                    \"\$DEST/flutter_service_worker.js\" \
                    \"\$DEST/version.txt\" \
                    \"\$DEST/assets/AssetManifest.json\" \
                    \"\$DEST/assets/FontManifest.json\" || true; \
             rm -rf \"\$DEST/assets\" \
                    \"\$DEST/icons\" \
                    \"\$DEST/fonts\" \
                    \"\$DEST/canvaskit\" \
                    \"\$DEST/_flutter\" || true"

      - name: Rsync para o servidor
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          RSYNC_DELETE="--delete"
          if [[ -z "${{ steps.derive.outputs.state }}" && -z "${{ steps.derive.outputs.leaf }}" && -z "${{ steps.derive.outputs.empresa_slug }}" ]]; then
            RSYNC_DELETE=""
          fi
          rsync -avzr ${RSYNC_DELETE} \
            -e "ssh -i ~/.ssh/id_rsa -p $SSH_PORT" \
            _src/build/web/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"${{ steps.derive.outputs.dest_dir }}/"

      - name: Gravar version.txt no destino
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"; SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "printf 'domain=%s\nslug=%s\nempresa_slug=%s\nzip_url=%s\ncommit=%s\nrun_id=%s\ndate=%s\nbase_href=%s\n' \
             '${{ steps.derive.outputs.domain }}' '${{ steps.derive.outputs.slug }}' '${{ steps.derive.outputs.empresa_slug }}' \
             '${{ steps.derive.outputs.zip_url }}' \
             '${{ github.sha }}' '${{ github.run_id }}' \"\$(date -u +'%F %T UTC')\" \
             '${{ steps.derive.outputs.base_href }}' \
             > '${{ steps.derive.outputs.dest_dir }}/version.txt'"
