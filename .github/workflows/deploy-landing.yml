name: Deploy Landing (Flutter ZIP) — build + publish

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domínio'
        type: choice
        options: [pinacle.com.br, gestordecapitais.com, tetramusic.com.br]
        required: true
      slug:
        description: 'Slug (pode ser vazio, "beta", "dev", "beta/slug", "dev/slug" ou "slug")'
        required: false
      zip_url:
        description: 'URL pública do ZIP do Flutter (com pubspec.yaml na raiz)'
        required: true

permissions:
  contents: write

concurrency:
  group: deploy-landing
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (repo ops)
        uses: actions/checkout@v4

      - name: Validar inputs e preparar ambiente
        id: derive
        shell: bash
        run: |
          set -euo pipefail

          DOMAIN="${{ github.event.inputs.domain }}"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          ZIP_URL="${{ github.event.inputs.zip_url }}"

          # Normalizar slug (trim)
          SLUG="$(echo -n "${RAW_SLUG:-}" | sed 's#^/*##; s#/*$##')"

          # Validar domínio
          case "$DOMAIN" in
            pinacle.com.br|gestordecapitais.com|tetramusic.com.br) ;;
            *) echo "Domínio inválido"; exit 1 ;;
          esac

          # Regras de slug aceitas:
          #   "" (raiz prod)
          #   "beta" | "dev" (raiz do estado)
          #   "beta/<slug>" | "dev/<slug>"
          #   "<slug>" (a-z0-9-)
          re_slug='^$|^(beta|dev)$|^(beta|dev)/[a-z0-9-]{1,64}$|^[a-z0-9-]{1,64}$'
          if [[ ! "$SLUG" =~ $re_slug ]]; then
            echo "Slug inválido. Use vazio, 'beta', 'dev', 'beta/<slug>', 'dev/<slug>' ou '<slug>' (a-z0-9-)."
            exit 1
          fi

          # Derivar estado e rota base
          STATE=""        # "", "beta", "dev"
          LEAF=""         # "", ou "<slug>"
          if [[ "$SLUG" == "beta" || "$SLUG" == "dev" ]]; then
            STATE="$SLUG"; LEAF=""
          elif [[ "$SLUG" =~ ^(beta|dev)/.+$ ]]; then
            STATE="${SLUG%%/*}"
            LEAF="${SLUG#*/}"
          elif [[ -n "$SLUG" ]]; then
            STATE=""
            LEAF="$SLUG"
          else
            STATE=""
            LEAF=""
          fi

          # BASE_HREF (para build Flutter)
          if [[ -z "$STATE" ]]; then
            if [[ -z "$LEAF" ]]; then
              BASE_HREF="/"                         # prod, homepage
            else
              BASE_HREF="/p/${LEAF}/"               # prod com slug
            fi
          else
            if [[ -z "$LEAF" ]]; then
              BASE_HREF="/p/${STATE}/"              # beta/dev homepage do estado
            else
              BASE_HREF="/p/${STATE}/${LEAF}/"      # beta/dev com slug
            fi
          fi

          # Diretório de destino no servidor
          DEST_DIR="/var/www/pages/${DOMAIN}"
          if [[ -z "$STATE" ]]; then
            if [[ -n "$LEAF" ]]; then
              DEST_DIR="${DEST_DIR}/${LEAF}"
            fi
          else
            if [[ -z "$LEAF" ]]; then
              DEST_DIR="${DEST_DIR}/${STATE}"
            else
              DEST_DIR="${DEST_DIR}/${STATE}/${LEAF}"
            fi
          fi

          echo "domain=$DOMAIN"        >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG"            >> "$GITHUB_OUTPUT"
          echo "state=$STATE"          >> "$GITHUB_OUTPUT"
          echo "leaf=$LEAF"            >> "$GITHUB_OUTPUT"
          echo "base_href=$BASE_HREF"  >> "$GITHUB_OUTPUT"
          echo "dest_dir=$DEST_DIR"    >> "$GITHUB_OUTPUT"
          echo "zip_url=$ZIP_URL"      >> "$GITHUB_OUTPUT"

          # Preparar SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "${{ secrets.SSH_PORT || 22 }}" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

          # Verificar domínio no servidor
          ssh -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT || 22 }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "[ -d /var/www/pages/${DOMAIN} ] || { echo 'Domínio não preparado no servidor'; exit 1; }"

      - name: Baixar ZIP do Flutter
        run: |
          curl -fL "${{ steps.derive.outputs.zip_url }}" -o site.zip

      - name: Conferir estrutura do ZIP
        run: |
          unzip -q site.zip -d _src
          test -f _src/pubspec.yaml || { echo "ZIP deve conter pubspec.yaml na raiz"; exit 1; }
          ls -la _src

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache do .pub-cache (opcional)
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-pubcache-${{ runner.os }}-${{ hashFiles('_src/pubspec.lock', '_src/pubspec.yaml') }}
          restore-keys: |
            flutter-pubcache-${{ runner.os }}-

      - name: Flutter pub get
        working-directory: _src
        run: flutter pub get

      - name: Garantir plataforma Web (se o ZIP não vier com web/)
        working-directory: _src
        run: |
          flutter config --enable-web
          if [ ! -d "web" ]; then
            echo "Projeto sem suporte Web; executando flutter create..."
            flutter create . --platforms web
          fi

      - name: Build Flutter Web (com base-href derivado)
        working-directory: _src
        run: |
          flutter clean
          flutter config --enable-web
          if flutter build web -h | grep -q -- '--web-renderer'; then
            flutter build web --release --web-renderer canvaskit \
              --base-href "${{ steps.derive.outputs.base_href }}"
          else
            flutter build web --release \
              --base-href "${{ steps.derive.outputs.base_href }}"
          fi

      - name: Criar diretório destino
        run: |
          ssh -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT || 22 }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p '${{ steps.derive.outputs.dest_dir }}'"

      - name: Rsync para o servidor
        run: |
          rsync -avzr --delete \
            -e "ssh -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT || 22 }}" \
            _src/build/web/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"${{ steps.derive.outputs.dest_dir }}/"

      - name: Gravar version.txt no destino
        run: |
          ssh -i ~/.ssh/id_rsa -p "${{ secrets.SSH_PORT || 22 }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "printf 'domain=%s\nslug=%s\nzip_url=%s\ncommit=%s\nrun_id=%s\ndate=%s\nbase_href=%s\n' \
             '${{ steps.derive.outputs.domain }}' '${{ steps.derive.outputs.slug }}' '${{ steps.derive.outputs.zip_url }}' \
             '${{ github.sha }}' '${{ github.run_id }}' \"\$(date -u +'%F %T UTC')\" \
             '${{ steps.derive.outputs.base_href }}' \
             > '${{ steps.derive.outputs.dest_dir }}/version.txt'"
