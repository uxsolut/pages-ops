name: Deploy Landing (Flutter ZIP) — build + publish

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domínio'
        type: choice
        options: [pinacle.com.br, gestordecapitais.com, tetramusic.com.br]
        required: true
      slug:
        description: 'Slug (vazio, "beta", "dev", "beta/slug", "dev/slug" ou "slug")'
        required: false
      id_empresa:
        description: 'ID da empresa (opcional; inclui o nome da empresa na URL)'
        required: false
      zip_url:
        description: 'URL pública do ZIP do Flutter (com pubspec.yaml na raiz)'
        required: true

permissions:
  contents: write

concurrency:
  group: deploy-landing
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (repo ops)
        uses: actions/checkout@v4

      - name: Validar inputs e preparar ambiente
        id: derive
        shell: bash
        env:
          PGHOST:     ${{ secrets.PGHOST }}
          PGPORT:     ${{ secrets.PGPORT }}
          PGDATABASE: ${{ secrets.PGDATABASE }}
          PGUSER:     ${{ secrets.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
        run: |
          set -euo pipefail

          DOMAIN="${{ github.event.inputs.domain }}"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          RAW_ID_EMPRESA="${{ github.event.inputs.id_empresa }}"
          ZIP_URL="${{ github.event.inputs.zip_url }}"

          echo ">>> Inputs recebidos:"
          echo "domain=${DOMAIN}"
          echo "raw_slug=${RAW_SLUG:-<vazio>}"
          echo "raw_id_empresa=${RAW_ID_EMPRESA:-<vazio>}"
          echo "zip_url=${ZIP_URL}"

          # Normalizar slug (um nível apenas)
          SLUG="$(echo -n "${RAW_SLUG:-}" | sed 's#^/*##; s#/*$##')"

          # Validar domínio
          case "$DOMAIN" in
            pinacle.com.br|gestordecapitais.com|tetramusic.com.br) ;;
            *) echo "Domínio inválido"; exit 1 ;;
          esac

          # Regras de slug: "" | "beta" | "dev" | "beta/<slug>" | "dev/<slug>" | "<slug>"
          re_slug='^$|^(beta|dev)$|^(beta|dev)/[a-z0-9-]{1,64}$|^[a-z0-9-]{1,64}$'
          if [[ ! "$SLUG" =~ $re_slug ]]; then
            echo "Slug inválido. Use vazio, 'beta', 'dev', 'beta/<slug>', 'dev/<slug>' ou '<slug>' (a-z0-9-, 1-64)."
            exit 1
          fi

          # Derivar estado e folha
          STATE=""   # "", "beta", "dev"
          LEAF=""    # "", "<slug>"
          if [[ "$SLUG" == "beta" || "$SLUG" == "dev" ]]; then
            STATE="$SLUG"; LEAF=""
          elif [[ "$SLUG" =~ ^(beta|dev)/.+$ ]]; then
            STATE="${SLUG%%/*}"; LEAF="${SLUG#*/}"
          elif [[ -n "$SLUG" ]]; then
            STATE=""; LEAF="$SLUG"
          fi

          echo ">>> Derivados:"
          echo "STATE=${STATE:-<vazio>}"
          echo "LEAF=${LEAF:-<vazio>}"

          # Resolver empresa (opcional) -> EMPRESA_SLUG (minúsculo)
          EMPRESA_SLUG=""
          if [[ -n "${RAW_ID_EMPRESA:-}" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y postgresql-client
            : "${PGPORT:=5432}"

            if [[ -z "${PGHOST:-}" || -z "${PGDATABASE:-}" || -z "${PGUSER:-}" || -z "${PGPASSWORD:-}" ]]; then
              echo "Faltam secrets do Postgres (PGHOST, PGDATABASE, PGUSER, PGPASSWORD)."
              exit 1
            fi

            NOME_EMPRESA="$(psql "host=$PGHOST port=$PGPORT dbname=$PGDATABASE user=$PGUSER password=$PGPASSWORD" \
              -tA -c "SELECT nome FROM global.empresas WHERE id = ${RAW_ID_EMPRESA} LIMIT 1;")"

            echo "nome_empresa=${NOME_EMPRESA:-<nao_encontrado>}"

            if [[ -z "$NOME_EMPRESA" ]]; then
              echo "Empresa id=${RAW_ID_EMPRESA} não encontrada."
              exit 1
            fi

            EMPRESA_SLUG="$(printf '%s' "$NOME_EMPRESA" \
              | iconv -f UTF-8 -t ASCII//TRANSLIT 2>/dev/null \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/[^a-z0-9]+/-/g; s/-+/-/g; s/^-+//; s/-+$//' )"

            if [[ -z "$EMPRESA_SLUG" ]]; then
              echo "Falha ao gerar slug da empresa a partir de \"$NOME_EMPRESA\"."
              exit 1
            fi
          fi

          echo "empresa_slug=${EMPRESA_SLUG:-<vazio>}"

          # ======== BASE_HREF (para build Flutter) — SEM /p ========
          # Monta /<STATE?>/<EMPRESA_SLUG?>/<LEAF?>/
          parts=()
          [[ -n "$STATE" ]] && parts+=("$STATE")
          [[ -n "$EMPRESA_SLUG" ]] && parts+=("$EMPRESA_SLUG")
          [[ -n "$LEAF" ]] && parts+=("$LEAF")

          if [[ ${#parts[@]} -eq 0 ]]; then
            BASE_HREF="/"
          else
            BASE_HREF="/$(IFS=/; echo "${parts[*]}")/"
          fi
          # =========================================================

          # Diretório de destino no servidor
          DEST_DIR="/var/www/pages/${DOMAIN}"
          if [[ ${#parts[@]} -gt 0 ]]; then
            DEST_DIR="${DEST_DIR}/$(IFS=/; echo "${parts[*]}")"
          fi

          echo "BASE_HREF=${BASE_HREF}"
          echo "DEST_DIR=${DEST_DIR}"

          echo "domain=$DOMAIN"              >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG"                  >> "$GITHUB_OUTPUT"
          echo "state=$STATE"                >> "$GITHUB_OUTPUT"
          echo "leaf=$LEAF"                  >> "$GITHUB_OUTPUT"
          echo "empresa_slug=$EMPRESA_SLUG"  >> "$GITHUB_OUTPUT"
          echo "base_href=$BASE_HREF"        >> "$GITHUB_OUTPUT"
          echo "dest_dir=$DEST_DIR"          >> "$GITHUB_OUTPUT"
          echo "zip_url=$ZIP_URL"            >> "$GITHUB_OUTPUT"

          # Preparar SSH (porta com fallback 22 via bash)
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SSH_PORT="${{ secrets.SSH_PORT }}"
          SSH_PORT="${SSH_PORT:-22}"
          ssh-keyscan -p "$SSH_PORT" -H "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

          # Verificar domínio no servidor
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "[ -d /var/www/pages/${DOMAIN} ] || { echo 'Domínio não preparado no servidor'; exit 1; }"

      - name: Baixar ZIP do Flutter
        run: |
          curl -fL "${{ steps.derive.outputs.zip_url }}" -o site.zip

      - name: Conferir estrutura do ZIP
        run: |
          unzip -q site.zip -d _src
          test -f _src/pubspec.yaml || { echo "ZIP deve conter pubspec.yaml na raiz"; exit 1; }
          ls -la _src

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache do .pub-cache (opcional)
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: flutter-pubcache-${{ runner.os }}-${{ hashFiles('_src/pubspec.lock', '_src/pubspec.yaml') }}
          restore-keys: |
            flutter-pubcache-${{ runner.os }}-

      - name: Flutter pub get
        working-directory: _src
        run: flutter pub get

      - name: Garantir plataforma Web (se o ZIP não vier com web/)
        working-directory: _src
        run: |
          flutter config --enable-web
          if [ ! -d "web" ]; then
            echo "Projeto sem suporte Web; executando flutter create..."
            flutter create . --platforms web
          fi

      - name: Build Flutter Web (com base-href derivado)
        working-directory: _src
        run: |
          flutter clean
          flutter config --enable-web
          if flutter build web -h | grep -q -- '--web-renderer'; then
            flutter build web --release --web-renderer canvaskit \
              --base-href "${{ steps.derive.outputs.base_href }}"
          else
            flutter build web --release \
              --base-href "${{ steps.derive.outputs.base_href }}"
          fi

      - name: Criar diretório destino
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"
          SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p '${{ steps.derive.outputs.dest_dir }}'"

      - name: Limpar homepage (prod sem estado/empresa/slug)
        if: ${{ steps.derive.outputs.state == '' && steps.derive.outputs.leaf == '' && steps.derive.outputs.empresa_slug == '' }}
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"
          SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "set -euo pipefail; \
             DEST='${{ steps.derive.outputs.dest_dir }}'; \
             rm -f  \"\$DEST/index.html\" \
                    \"\$DEST/favicon.png\" \
                    \"\$DEST/favicon.ico\" \
                    \"\$DEST/manifest.json\" \
                    \"\$DEST/manifest.webmanifest\" \
                    \"\$DEST/flutter.js\" \
                    \"\$DEST/flutter_service_worker.js\" \
                    \"\$DEST/version.txt\" \
                    \"\$DEST/assets/AssetManifest.json\" \
                    \"\$DEST/assets/FontManifest.json\" || true; \
             rm -rf \"\$DEST/assets\" \
                    \"\$DEST/icons\" \
                    \"\$DEST/fonts\" \
                    \"\$DEST/canvaskit\" \
                    \"\$DEST/_flutter\" || true"

      - name: Rsync para o servidor
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"
          SSH_PORT="${SSH_PORT:-22}"
          RSYNC_DELETE="--delete"
          if [[ -z "${{ steps.derive.outputs.state }}" && -z "${{ steps.derive.outputs.leaf }}" && -z "${{ steps.derive.outputs.empresa_slug }}" ]]; then
            RSYNC_DELETE=""
          fi
          rsync -avzr ${RSYNC_DELETE} \
            -e "ssh -i ~/.ssh/id_rsa -p $SSH_PORT" \
            _src/build/web/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:"${{ steps.derive.outputs.dest_dir }}/"

      - name: Gravar version.txt no destino
        run: |
          SSH_PORT="${{ secrets.SSH_PORT }}"
          SSH_PORT="${SSH_PORT:-22}"
          ssh -i ~/.ssh/id_rsa -p "$SSH_PORT" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "printf 'domain=%s\nslug=%s\nempresa_slug=%s\nzip_url=%s\ncommit=%s\nrun_id=%s\ndate=%s\nbase_href=%s\n' \
             '${{ steps.derive.outputs.domain }}' '${{ steps.derive.outputs.slug }}' '${{ steps.derive.outputs.empresa_slug }}' \
             '${{ steps.derive.outputs.zip_url }}' \
             '${{ github.sha }}' '${{ github.run_id }}' \"\$(date -u +'%F %T UTC')\" \
             '${{ steps.derive.outputs.base_href }}' \
             > '${{ steps.derive.outputs.dest_dir }}/version.txt'"
