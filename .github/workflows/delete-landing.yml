name: Delete Landing

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domínio'
        type: choice
        options: [pinacle.com.br, gestordecapitais.com, tetramusic.com.br]
        required: true
      slug:
        description: 'Slug (a-z0-9- ou beta/dev + slug, ex.: "legal" ou "beta/legal")'
        required: true
  repository_dispatch:
    types: [delete-landing]  # permite disparo via API/Backend

permissions:
  contents: read

concurrency:
  group: delete-landing
  cancel-in-progress: true

jobs:
  delete:
    runs-on: ubuntu-latest

    steps:
      - name: Preparar SSH
        env:
          GH_SSH_HOST: ${{ secrets.SSH_HOST }}
          GH_SSH_USER: ${{ secrets.SSH_USER }}
          GH_SSH_KEY:  ${{ secrets.SSH_KEY }}
          GH_SSH_PORT: ${{ secrets.SSH_PORT }}  # opcional
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf "%s" "${GH_SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          SSH_PORT="${GH_SSH_PORT:-22}"
          # pré-aceita a host key apenas para o host/porta informados
          ssh-keyscan -p "${SSH_PORT}" -H "${GH_SSH_HOST}" >> ~/.ssh/known_hosts
          echo "SSH_PORT=${SSH_PORT}"    >> "${GITHUB_ENV}"
          echo "SSH_HOST=${GH_SSH_HOST}" >> "${GITHUB_ENV}"
          echo "SSH_USER=${GH_SSH_USER}" >> "${GITHUB_ENV}"

      - name: Resolver domain/slug (manual x externo)
        id: resolve
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.domain }}" ]; then
            echo "domain=${{ github.event.inputs.domain }}" >> "${GITHUB_OUTPUT}"
            echo "slug=${{ github.event.inputs.slug }}"     >> "${GITHUB_OUTPUT}"
          else
            echo "domain=${{ github.event.client_payload.domain }}" >> "${GITHUB_OUTPUT}"
            echo "slug=${{ github.event.client_payload.slug }}"     >> "${GITHUB_OUTPUT}"
          fi

      - name: Apagar pasta do deploy (seguro)
        env:
          DOMAIN: ${{ steps.resolve.outputs.domain }}
          SLUG_RAW: ${{ steps.resolve.outputs.slug }}
        run: |
          set -euo pipefail

          # --- Normalizações ---
          DOMAIN_TRIM="$(echo -n "${DOMAIN:-}" | tr -d '[:space:]')"
          # remove barras duplicadas/iniciais/finais do slug
          SLUG="$(echo -n "${SLUG_RAW:-}" | sed 's#^/*##; s#/*$##')"

          # --- Validações defensivas ---
          case "${DOMAIN_TRIM}" in
            pinacle.com.br|gestordecapitais.com|tetramusic.com.br) ;;
            *) echo "Domínio inválido: ${DOMAIN_TRIM}"; exit 1 ;;
          esac

          # Aceita "slug" OU "beta"|"dev" + "/slug"
          # Ex.: "legal" | "beta/legal" | "dev/legal"
          if ! echo "${SLUG}" | grep -Eq '^([a-z0-9-]{1,64}|(beta|dev)/[a-z0-9-]{1,64})$'; then
            echo "Slug inválido: '${SLUG}'. Use 'meu-slug' ou 'beta/meu-slug' ou 'dev/meu-slug' (a-z0-9-)."
            exit 1
          fi

          # --- Monta caminhos e faz checagens de segurança ---
          ROOT="/var/www/pages/${DOMAIN_TRIM}"
          TARGET_REL="${SLUG}"                 # já normalizado
          TARGET_ABS="$(realpath -m "${ROOT}/${TARGET_REL}")"  || { echo "Falha ao resolver caminho"; exit 1; }
          ROOT_ABS="$(realpath -m "${ROOT}")"  || { echo "Falha ao resolver raiz"; exit 1; }

          echo "ROOT:   ${ROOT_ABS}"
          echo "TARGET: ${TARGET_ABS}"

          # TARGET deve estar dentro de ROOT/
          case "${TARGET_ABS}" in
            ${ROOT_ABS}/*) ;;
            *) echo "Alvo fora da raiz do domínio. Abortando."; exit 1 ;;
          esac

          # Bloqueia exclusão da raiz do domínio (apenas subdiretórios)
          if [ "${TARGET_ABS}" = "${ROOT_ABS}" ]; then
            echo "Recusado: tentativa de excluir a raiz do domínio."
            exit 1
          fi

          # Confere existência e apaga
          ssh -i ~/.ssh/id_rsa -p "${SSH_PORT}" "${SSH_USER}@${SSH_HOST}" \
            "set -euo pipefail; \
             TARGET='${TARGET_ABS}'; \
             if [ -d \"\$TARGET\" ]; then \
               rm -rf -- \"\$TARGET\"; \
               echo 'Apagado: '\$TARGET; \
             else \
               echo 'Nada para apagar: '\$TARGET; \
             fi"
